// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/ryan-pip/terraform-provider-airbyte/internal/sdk/pkg/types"
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType string

const (
	SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthTypeService SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType = "Service"
)

func (e SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType) ToPointer() *SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType {
	return &e
}

func (e *SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service":
		*e = SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType: %v", v)
	}
}

type SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication struct {
	AuthType SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType `json:"auth_type"`
	// The email of the user which has permissions to access the Google Workspace Admin APIs.
	Email string `json:"email"`
	// The JSON key of the service account to use for authorization. Read more <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys">here</a>.
	ServiceAccountInfo string `json:"service_account_info"`
}

type SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType string

const (
	SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthTypeClient SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType = "Client"
)

func (e SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType) ToPointer() *SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType {
	return &e
}

func (e *SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType: %v", v)
	}
}

type SourceGoogleSearchConsoleAuthenticationTypeOAuth struct {
	// Access token for making authenticated requests. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	AccessToken *string                                                  `json:"access_token,omitempty"`
	AuthType    SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType `json:"auth_type"`
	// The client ID of your Google Search Console developer application. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	ClientID string `json:"client_id"`
	// The client secret of your Google Search Console developer application. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	ClientSecret string `json:"client_secret"`
	// The token for obtaining a new access token. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	RefreshToken string `json:"refresh_token"`
}

type SourceGoogleSearchConsoleAuthenticationTypeType string

const (
	SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeOAuth                           SourceGoogleSearchConsoleAuthenticationTypeType = "source-google-search-console_Authentication Type_OAuth"
	SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication SourceGoogleSearchConsoleAuthenticationTypeType = "source-google-search-console_Authentication Type_Service Account Key Authentication"
)

type SourceGoogleSearchConsoleAuthenticationType struct {
	SourceGoogleSearchConsoleAuthenticationTypeOAuth                           *SourceGoogleSearchConsoleAuthenticationTypeOAuth
	SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication *SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication

	Type SourceGoogleSearchConsoleAuthenticationTypeType
}

func CreateSourceGoogleSearchConsoleAuthenticationTypeSourceGoogleSearchConsoleAuthenticationTypeOAuth(sourceGoogleSearchConsoleAuthenticationTypeOAuth SourceGoogleSearchConsoleAuthenticationTypeOAuth) SourceGoogleSearchConsoleAuthenticationType {
	typ := SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeOAuth

	return SourceGoogleSearchConsoleAuthenticationType{
		SourceGoogleSearchConsoleAuthenticationTypeOAuth: &sourceGoogleSearchConsoleAuthenticationTypeOAuth,
		Type: typ,
	}
}

func CreateSourceGoogleSearchConsoleAuthenticationTypeSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication(sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication) SourceGoogleSearchConsoleAuthenticationType {
	typ := SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication

	return SourceGoogleSearchConsoleAuthenticationType{
		SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication: &sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceGoogleSearchConsoleAuthenticationType) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceGoogleSearchConsoleAuthenticationTypeOAuth := new(SourceGoogleSearchConsoleAuthenticationTypeOAuth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleSearchConsoleAuthenticationTypeOAuth); err == nil {
		u.SourceGoogleSearchConsoleAuthenticationTypeOAuth = sourceGoogleSearchConsoleAuthenticationTypeOAuth
		u.Type = SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeOAuth
		return nil
	}

	sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication := new(SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication); err == nil {
		u.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication = sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication
		u.Type = SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleSearchConsoleAuthenticationType) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleSearchConsoleAuthenticationTypeOAuth != nil {
		return json.Marshal(u.SourceGoogleSearchConsoleAuthenticationTypeOAuth)
	}

	if u.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication != nil {
		return json.Marshal(u.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication)
	}

	return nil, nil
}

// SourceGoogleSearchConsoleDataState - If "final" or if this parameter is omitted, the returned data will include only finalized data. Setting this parameter to "all" should not be used with Incremental Sync mode as it may cause data loss. If "all", data will include fresh data.
type SourceGoogleSearchConsoleDataState string

const (
	SourceGoogleSearchConsoleDataStateFinal SourceGoogleSearchConsoleDataState = "final"
	SourceGoogleSearchConsoleDataStateAll   SourceGoogleSearchConsoleDataState = "all"
)

func (e SourceGoogleSearchConsoleDataState) ToPointer() *SourceGoogleSearchConsoleDataState {
	return &e
}

func (e *SourceGoogleSearchConsoleDataState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "final":
		fallthrough
	case "all":
		*e = SourceGoogleSearchConsoleDataState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleDataState: %v", v)
	}
}

type SourceGoogleSearchConsoleGoogleSearchConsole string

const (
	SourceGoogleSearchConsoleGoogleSearchConsoleGoogleSearchConsole SourceGoogleSearchConsoleGoogleSearchConsole = "google-search-console"
)

func (e SourceGoogleSearchConsoleGoogleSearchConsole) ToPointer() *SourceGoogleSearchConsoleGoogleSearchConsole {
	return &e
}

func (e *SourceGoogleSearchConsoleGoogleSearchConsole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "google-search-console":
		*e = SourceGoogleSearchConsoleGoogleSearchConsole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleGoogleSearchConsole: %v", v)
	}
}

type SourceGoogleSearchConsole struct {
	Authorization SourceGoogleSearchConsoleAuthenticationType `json:"authorization"`
	// A JSON array describing the custom reports you want to sync from Google Search Console. See <a href="https://docs.airbyte.com/integrations/sources/google-search-console#step-2-set-up-the-google-search-console-connector-in-airbyte">the docs</a> for more information about the exact format you can use to fill out this field.
	CustomReports *string `json:"custom_reports,omitempty"`
	// If "final" or if this parameter is omitted, the returned data will include only finalized data. Setting this parameter to "all" should not be used with Incremental Sync mode as it may cause data loss. If "all", data will include fresh data.
	DataState *SourceGoogleSearchConsoleDataState `json:"data_state,omitempty"`
	// UTC date in the format 2017-01-25. Any data after this date will not be replicated. Must be greater or equal to the start date field.
	EndDate *types.Date `json:"end_date,omitempty"`
	// The URLs of the website property attached to your GSC account. Read more <a href="https://support.google.com/webmasters/answer/34592?hl=en">here</a>.
	SiteUrls   []string                                     `json:"site_urls"`
	SourceType SourceGoogleSearchConsoleGoogleSearchConsole `json:"sourceType"`
	// UTC date in the format 2017-01-25. Any data before this date will not be replicated.
	StartDate types.Date `json:"start_date"`
}
