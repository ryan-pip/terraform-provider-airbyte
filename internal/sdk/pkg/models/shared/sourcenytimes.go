// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/ryan-pip/terraform-provider-airbyte/internal/sdk/pkg/types"
	"encoding/json"
	"fmt"
)

// SourceNytimesPeriodUsedForMostPopularStreams - Period of time (in days)
type SourceNytimesPeriodUsedForMostPopularStreams int64

const (
	SourceNytimesPeriodUsedForMostPopularStreamsOne    SourceNytimesPeriodUsedForMostPopularStreams = 1
	SourceNytimesPeriodUsedForMostPopularStreamsSeven  SourceNytimesPeriodUsedForMostPopularStreams = 7
	SourceNytimesPeriodUsedForMostPopularStreamsThirty SourceNytimesPeriodUsedForMostPopularStreams = 30
)

func (e SourceNytimesPeriodUsedForMostPopularStreams) ToPointer() *SourceNytimesPeriodUsedForMostPopularStreams {
	return &e
}

func (e *SourceNytimesPeriodUsedForMostPopularStreams) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 7:
		fallthrough
	case 30:
		*e = SourceNytimesPeriodUsedForMostPopularStreams(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNytimesPeriodUsedForMostPopularStreams: %v", v)
	}
}

// SourceNytimesShareTypeUsedForMostPopularSharedStream - Share Type
type SourceNytimesShareTypeUsedForMostPopularSharedStream string

const (
	SourceNytimesShareTypeUsedForMostPopularSharedStreamFacebook SourceNytimesShareTypeUsedForMostPopularSharedStream = "facebook"
)

func (e SourceNytimesShareTypeUsedForMostPopularSharedStream) ToPointer() *SourceNytimesShareTypeUsedForMostPopularSharedStream {
	return &e
}

func (e *SourceNytimesShareTypeUsedForMostPopularSharedStream) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "facebook":
		*e = SourceNytimesShareTypeUsedForMostPopularSharedStream(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNytimesShareTypeUsedForMostPopularSharedStream: %v", v)
	}
}

type SourceNytimesNytimes string

const (
	SourceNytimesNytimesNytimes SourceNytimesNytimes = "nytimes"
)

func (e SourceNytimesNytimes) ToPointer() *SourceNytimesNytimes {
	return &e
}

func (e *SourceNytimesNytimes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "nytimes":
		*e = SourceNytimesNytimes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNytimesNytimes: %v", v)
	}
}

type SourceNytimes struct {
	// API Key
	APIKey string `json:"api_key"`
	// End date to stop the article retrieval (format YYYY-MM)
	EndDate *types.Date `json:"end_date,omitempty"`
	// Period of time (in days)
	Period SourceNytimesPeriodUsedForMostPopularStreams `json:"period"`
	// Share Type
	ShareType  *SourceNytimesShareTypeUsedForMostPopularSharedStream `json:"share_type,omitempty"`
	SourceType SourceNytimesNytimes                                  `json:"sourceType"`
	// Start date to begin the article retrieval (format YYYY-MM)
	StartDate types.Date `json:"start_date"`
}
