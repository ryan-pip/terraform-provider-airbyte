// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/ryan-pip/terraform-provider-airbyte/internal/sdk/pkg/types"
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationAuthType string

const (
	SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationAuthTypeService SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationAuthType = "Service"
)

func (e SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationAuthType) ToPointer() *SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationAuthType {
	return &e
}

func (e *SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service":
		*e = SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationAuthType: %v", v)
	}
}

type SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication struct {
	AuthType SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationAuthType `json:"auth_type"`
	// The email of the user which has permissions to access the Google Workspace Admin APIs.
	Email string `json:"email"`
	// The JSON key of the service account to use for authorization. Read more <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys">here</a>.
	ServiceAccountInfo string `json:"service_account_info"`
}

type SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthAuthType string

const (
	SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthAuthTypeClient SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthAuthType = "Client"
)

func (e SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthAuthType) ToPointer() *SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthAuthType {
	return &e
}

func (e *SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthAuthType: %v", v)
	}
}

type SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth struct {
	// Access token for making authenticated requests. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	AccessToken *string                                                        `json:"access_token,omitempty"`
	AuthType    SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthAuthType `json:"auth_type"`
	// The client ID of your Google Search Console developer application. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	ClientID string `json:"client_id"`
	// The client secret of your Google Search Console developer application. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	ClientSecret string `json:"client_secret"`
	// The token for obtaining a new access token. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	RefreshToken string `json:"refresh_token"`
}

type SourceGoogleSearchConsoleUpdateAuthenticationTypeType string

const (
	SourceGoogleSearchConsoleUpdateAuthenticationTypeTypeSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth                           SourceGoogleSearchConsoleUpdateAuthenticationTypeType = "source-google-search-console-update_Authentication Type_OAuth"
	SourceGoogleSearchConsoleUpdateAuthenticationTypeTypeSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication SourceGoogleSearchConsoleUpdateAuthenticationTypeType = "source-google-search-console-update_Authentication Type_Service Account Key Authentication"
)

type SourceGoogleSearchConsoleUpdateAuthenticationType struct {
	SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth                           *SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth
	SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication *SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication

	Type SourceGoogleSearchConsoleUpdateAuthenticationTypeType
}

func CreateSourceGoogleSearchConsoleUpdateAuthenticationTypeSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth(sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth) SourceGoogleSearchConsoleUpdateAuthenticationType {
	typ := SourceGoogleSearchConsoleUpdateAuthenticationTypeTypeSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth

	return SourceGoogleSearchConsoleUpdateAuthenticationType{
		SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth: &sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth,
		Type: typ,
	}
}

func CreateSourceGoogleSearchConsoleUpdateAuthenticationTypeSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication(sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication) SourceGoogleSearchConsoleUpdateAuthenticationType {
	typ := SourceGoogleSearchConsoleUpdateAuthenticationTypeTypeSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication

	return SourceGoogleSearchConsoleUpdateAuthenticationType{
		SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication: &sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceGoogleSearchConsoleUpdateAuthenticationType) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth := new(SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth); err == nil {
		u.SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth = sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth
		u.Type = SourceGoogleSearchConsoleUpdateAuthenticationTypeTypeSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth
		return nil
	}

	sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication := new(SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication); err == nil {
		u.SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication = sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication
		u.Type = SourceGoogleSearchConsoleUpdateAuthenticationTypeTypeSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleSearchConsoleUpdateAuthenticationType) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth != nil {
		return json.Marshal(u.SourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth)
	}

	if u.SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication != nil {
		return json.Marshal(u.SourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication)
	}

	return nil, nil
}

// SourceGoogleSearchConsoleUpdateDataState - If "final" or if this parameter is omitted, the returned data will include only finalized data. Setting this parameter to "all" should not be used with Incremental Sync mode as it may cause data loss. If "all", data will include fresh data.
type SourceGoogleSearchConsoleUpdateDataState string

const (
	SourceGoogleSearchConsoleUpdateDataStateFinal SourceGoogleSearchConsoleUpdateDataState = "final"
	SourceGoogleSearchConsoleUpdateDataStateAll   SourceGoogleSearchConsoleUpdateDataState = "all"
)

func (e SourceGoogleSearchConsoleUpdateDataState) ToPointer() *SourceGoogleSearchConsoleUpdateDataState {
	return &e
}

func (e *SourceGoogleSearchConsoleUpdateDataState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "final":
		fallthrough
	case "all":
		*e = SourceGoogleSearchConsoleUpdateDataState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleUpdateDataState: %v", v)
	}
}

type SourceGoogleSearchConsoleUpdate struct {
	Authorization SourceGoogleSearchConsoleUpdateAuthenticationType `json:"authorization"`
	// A JSON array describing the custom reports you want to sync from Google Search Console. See <a href="https://docs.airbyte.com/integrations/sources/google-search-console#step-2-set-up-the-google-search-console-connector-in-airbyte">the docs</a> for more information about the exact format you can use to fill out this field.
	CustomReports *string `json:"custom_reports,omitempty"`
	// If "final" or if this parameter is omitted, the returned data will include only finalized data. Setting this parameter to "all" should not be used with Incremental Sync mode as it may cause data loss. If "all", data will include fresh data.
	DataState *SourceGoogleSearchConsoleUpdateDataState `json:"data_state,omitempty"`
	// UTC date in the format 2017-01-25. Any data after this date will not be replicated. Must be greater or equal to the start date field.
	EndDate *types.Date `json:"end_date,omitempty"`
	// The URLs of the website property attached to your GSC account. Read more <a href="https://support.google.com/webmasters/answer/34592?hl=en">here</a>.
	SiteUrls []string `json:"site_urls"`
	// UTC date in the format 2017-01-25. Any data before this date will not be replicated.
	StartDate types.Date `json:"start_date"`
}
